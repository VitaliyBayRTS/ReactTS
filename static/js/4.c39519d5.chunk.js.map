{"version":3,"sources":["hoc/witAuthRedirect.tsx","component/Dialog/Dialog.module.scss","component/Dialog/DialogItem/DialogItem.module.scss","component/Dialog/DialogItem/DialogItem.tsx","component/Dialog/DialogMessages/DialogMessage.tsx","component/Dialog/Dialog.tsx","component/Dialog/DialogContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","path","id","className","s","dialogItemBox","src","userFoto","alt","user","activeClassName","selected","name","DialogMessage","text","maxLength10","maxLength","MessageForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","Dialog","DialogItemElemets","dialogData","DialogItemData","map","u","key","DialogMessageElemets","DialogMessageData","m","dialogBox","dialogItem","dialogMessage","value","sendMessage","messageBody","compose","dialogPage","dispatch","DialogActions","addMessageActionCreator"],"mappings":"sNAUIA,EAAkB,SAACC,GACnB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIdE,EAAmB,SAACC,GAAoB,IAC3CC,EAD0C,iLAGxC,OAAIC,KAAKC,MAAMN,OAER,kBAACG,EAAcE,KAAKC,OAFG,kBAAC,IAAD,CAAUC,GAAG,eAHH,GAChBC,IAAML,WAWtC,OAHmCM,YAClCX,EAAiB,GADiBW,CACbL,K,oBCzB1BM,EAAOC,QAAU,CAAC,UAAY,4B,oBCA9BD,EAAOC,QAAU,CAAC,cAAgB,kCAAkC,KAAO,yBAAyB,SAAW,+B,kICmBhGC,EAVwC,SAACN,GAEpD,IAAIO,EAAO,WAAaP,EAAMQ,GAE9B,OAAO,yBAAKC,UAAWC,IAAEC,eACrB,yBAAKC,IAAKC,IAAUC,IAAI,KACxB,kBAAC,IAAD,CAASb,GAAIM,EAAME,UAAWC,IAAEK,KAAMC,gBAAiBN,IAAEO,UAAWjB,EAAMkB,QCHnEC,EANwC,SAACnB,GACpD,OAAO,6BACFA,EAAMoB,O,kCC0BXC,EAAcC,YAAU,IAWxBC,EAAcC,YAAU,CAACC,KAAM,WAAjBD,EAT+B,SAACxB,GAC9C,OAAQ,6BACJ,0BAAM0B,SAAU1B,EAAM2B,cAClB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAK,cAAca,SAAU,CAACV,KAC1D,qDAOGW,EAlCmC,SAAChC,GAC/C,IAAIiC,EAAoBjC,EAAMkC,WAAWC,eAAeC,KAAI,SAACC,GAAD,OAAY,kBAAC,EAAD,CAAYC,IAAKD,EAAE7B,GAAIA,GAAI6B,EAAE7B,GAAIU,KAAMmB,EAAEnB,UAC7GqB,EAAuBvC,EAAMkC,WAAWM,kBAAkBJ,KAAI,SAACK,GAAD,OAAY,kBAAC,EAAD,CAAeH,IAAKG,EAAEjC,GAAIY,KAAMqB,EAAErB,UAMhH,OACI,yBAAKX,UAAWC,IAAEgC,WACd,yBAAKjC,UAAWC,IAAEiC,YACbV,GAEL,yBAAKxB,UAAWC,IAAEkC,eACbL,EACD,kBAAChB,EAAD,CAAaG,SAXP,SAACmB,GACf7C,EAAM8C,YAAYD,EAAME,mB,wBCiBjBC,4BACX7C,aAhBkB,SAACV,GACnB,MAAO,CACHyC,WAAYzC,EAAMwD,eAID,SAACC,GACtB,MAAO,CACHJ,YAAc,SAACD,GACXK,EAASC,IAAcC,wBAAwBP,SAQ3DjD,IAFeoD,CAIdhB","file":"static/js/4.c39519d5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { stateType } from \"../redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n} \r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any> {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to=\"/login\"/> // If user doesnt authorized, \r\n                                                                //program redirect him to login page\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let connectAuthRedirectComponent = connect<mapStateToPropsType, {}, {}, stateType>\r\n    (mapStateToProps, {})(RedirectComponent)\r\n\r\n    return connectAuthRedirectComponent\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogBox\":\"Dialog_dialogBox__1Z3XZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItemBox\":\"DialogItem_dialogItemBox__10Eqf\",\"user\":\"DialogItem_user__1OfAk\",\"selected\":\"DialogItem_selected__8NyhT\"};","import React, { FunctionComponent } from 'react';\r\nimport s from './DialogItem.module.scss';\r\nimport { NavLink } from 'react-router-dom';\r\nimport userFoto from '../../../assets/img/user.jpeg';\r\n\r\ninterface PropsDialogItem {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: FunctionComponent<PropsDialogItem> = (props) => {\r\n\r\n    let path = '/dialog/' + props.id;\r\n\r\n    return <div className={s.dialogItemBox}>\r\n        <img src={userFoto} alt=\"\"/>\r\n        <NavLink to={path} className={s.user} activeClassName={s.selected}>{props.name}</NavLink> \r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React, { FunctionComponent } from 'react';\r\n\r\n\r\ninterface PropsMessage {\r\n    text: string\r\n}\r\n\r\nconst DialogMessage: FunctionComponent<PropsMessage> = (props) => {\r\n    return <div>\r\n        {props.text}\r\n    </div>\r\n}\r\n\r\nexport default DialogMessage;","import React, { FunctionComponent } from 'react';\r\nimport s from './Dialog.module.scss';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport DialogMessage from './DialogMessages/DialogMessage';\r\nimport { Field, reduxForm, destroy} from 'redux-form';\r\nimport { maxLength } from '../../utilities/validator/validator';\r\nimport { Textarea } from '../../utilities/ReduxForm/Form';\r\nimport { dialogDataType } from '../../types/types';\r\n\r\ntype PropsInterface = {\r\n    sendMessage: (value: string) => void\r\n    dialogData: dialogDataType\r\n}\r\n\r\nconst Dialog: FunctionComponent<PropsInterface> = (props) => {\r\n    let DialogItemElemets = props.dialogData.DialogItemData.map((u: any) => <DialogItem key={u.id} id={u.id} name={u.name} />);\r\n    let DialogMessageElemets = props.dialogData.DialogMessageData.map((m: any) => <DialogMessage key={m.id} text={m.text} />);\r\n\r\n    let sendMessage = (value: any) => {\r\n        props.sendMessage(value.messageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogBox}>\r\n            <div className={s.dialogItem}>\r\n                {DialogItemElemets}\r\n            </div>\r\n            <div className={s.dialogMessage}>\r\n                {DialogMessageElemets}\r\n                <MessageForm onSubmit={sendMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet maxLength10 = maxLength(10);\r\n\r\nconst ReduxMessageForm: FunctionComponent<any> = (props) => {\r\n    return (<div>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name=\"messageBody\" validate={[maxLength10]}/>\r\n            <button>Send Message</button>\r\n        </form>\r\n    </div>);\r\n} \r\n\r\nlet MessageForm = reduxForm({form: \"message\"})(ReduxMessageForm);\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport { DialogActions } from '../../redux/dialogReducer';\r\nimport Dialog from './Dialog';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/witAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { stateType } from '../../redux/redux-store';\r\nimport { dialogDataType } from '../../types/types';\r\n\r\ntype MapStateToPropsType = {\r\n    dialogData: dialogDataType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (value: string) => void\r\n}\r\n\r\ntype OwnProps ={ \r\n\r\n}\r\n\r\nlet mapStateToProps = (state: stateType): MapStateToPropsType => {\r\n    return {\r\n        dialogData: state.dialogPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage : (value: string) => {\r\n            dispatch(DialogActions.addMessageActionCreator(value))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnProps, stateType>(mapStateToProps, mapDispatchToProps),\r\nwithAuthRedirect\r\n)\r\n(Dialog) as React.ComponentType<any>;"],"sourceRoot":""}